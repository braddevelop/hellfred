--[[

    Hellfuzz

    A fuzzy-search chooser utility with subscriber notification.
    Composes a chooser that supports multi-level choice sets.

--]]

--------------------------------------------------------------------------
-- Public namespace
--------------------------------------------------------------------------
local module = {}

--------------------------------------------------------------------------
-- Private namespace
--------------------------------------------------------------------------
local _internal = {
    chooser = require('hellfred.hellfuzz.hellfuzz-chooser'),
    choices = {},
    firstChoiceSet = {},
    nextChoicesProviders = {},
    callbacks = {},
}

---
--- Handles chooser selection events
---
--- @param selectedChoice any The `ChoiceHandler.choice` returned from the chooser
--- @param meta any Custom meta generated by the query interceptor function
---
function _internal.onChooserEvent(selectedChoice, meta)
    if selectedChoice then
        -- If the selected choice has next choices then add them as the next choice set;
        -- else call the choice handler's callback function
        local id = selectedChoice.text
        if _internal.nextChoicesProviders[id] then
            local nextChoices = _internal.nextChoicesProviders[id]()

            if nextChoices then
                -- Register next choices
                nextChoices = module.addSubscribers(nextChoices)

                local next = {}
                hs.fnutils.each(nextChoices, function(choiceHandler)
                    table.insert(next, choiceHandler.choice)
                end)
                _internal.chooser.next(next)
            end
        elseif _internal.callbacks[id] then
            _internal.callbacks[id](selectedChoice, meta)
        end
    end
end

--------------------------------------------------------------------------
-- Public API
--------------------------------------------------------------------------

---
--- Add a subscriber to internal subscriber list
---
--- @param subscriber any A ChoiceHandler object
--- @return any
---
function module.addSubscriber(subscriber)
    local key = subscriber.choice.text

    if subscriber.showInFirstChoiceSet then
        _internal.firstChoiceSet[key] = subscriber
    end

    if subscriber.callback then
        _internal.callbacks[key] = subscriber.callback
    end

    if subscriber.nextChoicesFn then
        _internal.nextChoicesProviders[key] = subscriber.nextChoicesFn
        subscriber.choice['valid'] = false
    end

    return subscriber
end

---
--- Add multiple subscribers to internal subscriber list
---
--- @param subscribers any A list of ChoiceHandler objects
--- @return any
---
function module.addSubscribers(subscribers)
    hs.fnutils.each(subscribers, function(subscriber)
        subscriber = module.addSubscriber(subscriber)
    end)

    return subscribers
end

---
--- Set a query interceptor function
---
--- @param fn any
---
function module.setQueryInterceptor(fn)
    _internal.chooser.setQueryInterceptor(fn)
end

---
--- Initialise Hellfuzz
---
--- @param keySpec table
---
function module.init(keySpec)
    -- assign the function to call every time a selection event occurs
    _internal.chooser.init(_internal.onChooserEvent)

    -- when the hotkey fires, group all ChoiceHandlers that must show first,
    -- into a table and enter the chooser.
    hs.hotkey.bindSpec(keySpec, function()
        local firstSetOfChoices = {}
        for k, choiceHandler in pairs(_internal.firstChoiceSet) do
            table.insert(firstSetOfChoices, choiceHandler.choice)
        end
        _internal.chooser.enter(firstSetOfChoices)
    end)
end

return module